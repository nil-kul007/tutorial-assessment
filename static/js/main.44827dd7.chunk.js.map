{"version":3,"sources":["actions/simpleAction.js","reducers/rootReducer.js","reducers/simpleReducer.js","serviceWorker.js","components/App.js","index.js","store.js"],"names":["getExperts","dispatch","axios","method","url","headers","then","response","type","payload","data","getModuleList","getModuleDetails","moduleId","urlLink","combineReducers","projectDetails","state","action","result","expertDetails","courseDetails","videoData","image","videoSrc","introVideo","console","log","lessonDetails","userChapterDetails","content","Boolean","window","location","hostname","match","HomePage","React","lazy","App","componentDidMount","props","className","path","exact","render","fallback","Component","connect","ReactDOM","store","initialState","createStore","rootReducer","applyMiddleware","thunk","Store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOASMA,EAAa,kBAAM,SAAAC,GACrBC,IAAM,CACFC,OAAQ,MACRC,IAAK,2EACLC,QAAS,CAAE,kBAAmB,0CAE7BC,MAAK,SAAUC,GACdN,EAAS,CACPO,KAAM,eACNC,QAASF,EAASG,YAKxBC,EAAgB,kBAAM,SAAAV,GACxBC,IAAM,CACFC,OAAQ,MACRC,IAAK,8EACLC,QAAS,CAAE,kBAAmB,0CAE7BC,MAAK,SAAUC,GACdN,EAAS,CACPO,KAAM,cACNC,QAASF,EAASG,YAKxBE,EAAmB,SAACC,GAAD,OAAc,SAAAZ,GACrC,IAAIa,EAAU,wFAAwFD,EACrF,YAAbA,EACEZ,EAAS,CACPO,KAAM,sBAGZN,IAAM,CACFC,OAAQ,MACRC,IAAKU,EACLT,QAAS,CAAE,kBAAmB,0CAE7BC,MAAK,SAAUC,GACdN,EAAS,CACPO,KAAM,YACNC,QAASF,EAASG,a,wLClDfK,4BAAgB,CAC3BC,eCHW,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACnC,OAAQA,EAAOV,MACf,IAAK,gBACH,OAAO,2BACFS,GADL,IAEEE,OAAQD,EAAOT,UAEnB,IAAK,eACH,OAAO,2BACFQ,GADL,IAEEG,cAAeF,EAAOT,QAAQW,gBAElC,IAAK,cACH,OAAO,2BACFH,GADL,IAEEI,cAAeH,EAAOT,QAAQY,cAC9BC,UAAW,CACTC,MAAOL,EAAOT,QAAQY,cAAcE,MACpCC,SAAUN,EAAOT,QAAQY,cAAcI,cAG7C,IAAK,YAEH,OADAC,QAAQC,IAAIT,EAAOT,SACZ,2BACFQ,GADL,IAEEK,UAAW,CACTC,MAAM,GACNC,SAAUN,EAAOT,QAAQmB,cAAc,GAAGC,mBAAmB,GAAGC,WAGtE,IAAK,oBACH,OAAO,2BACFb,GADL,IAEEK,UAAW,CACTC,MAAMN,EAAMI,cAAcE,MAC1BC,SAAUP,EAAMI,cAAcI,cAGnC,QACC,OAAOR,MC3BOc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yECRAC,EAAWC,IAAMC,MAAK,kBAAM,uDAE5BC,E,4MAMJC,kBAAoB,WAClB,EAAKC,MAAMzC,aACX,EAAKyC,MAAM9B,iB,uDAIZ,OACC,yBAAK+B,UAAU,WACb,yBAAKA,UAAU,mBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAEC,OAAQ,kBAC7B,kBAAC,WAAD,CAAUC,SAAU,8CAClB,kBAACV,EAAD,UAGJ,kBAAC,IAAD,CAAOO,KAAK,QAASE,OAAQ,kBAC3B,kBAAC,WAAD,CAAUC,SAAU,8CAClB,kBAACV,EAAD,iB,GAvBMW,aA4CFC,eAVS,SAAA/B,GAAK,sBACzBA,MAGuB,SAAAhB,GAAQ,MAAK,CACvCD,WAAY,kBAAMC,EAASD,gBAC3BW,cAAe,kBAAMV,EAASU,gBAC9BC,iBAAkB,kBAAMX,EAASW,mBAGnBoC,CAA6CT,GC/C7DU,IAASJ,OACP,kBAAC,IAAD,CAAUK,MCPG,WAA0C,IAAlBC,EAAiB,uDAAJ,GACnD,OAAOC,sBACLC,EACAF,EACAG,0BAAgBC,MDGAC,IAChB,kBAAC,EAAD,OAEDC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.44827dd7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst simpleAction = () => dispatch => {\r\n    dispatch({\r\n     type: 'SIMPLE_ACTION',\r\n     payload: 'result_of_simple_action'\r\n    })\r\n}\r\n\r\nconst getExperts = () => dispatch => {\r\n    axios({\r\n        method: 'get',\r\n        url: 'https://stgapi.omnicuris.com/api/v3/courses/thyroid-in-pregnancy/experts',\r\n        headers: { 'hk-access-token': '89e684ac-7ade-4cd8-bbdf-419a92f4cc5f'}\r\n      })\r\n        .then(function (response) {\r\n          dispatch({\r\n            type: 'EXPERTS_LIST',\r\n            payload: response.data\r\n           })\r\n        });\r\n}\r\n\r\nconst getModuleList = () => dispatch => {\r\n    axios({\r\n        method: 'get',\r\n        url: 'https://stgapi.omnicuris.com/api/v3/courses?courseSlug=thyroid-in-pregnancy',\r\n        headers: { 'hk-access-token': '89e684ac-7ade-4cd8-bbdf-419a92f4cc5f'}\r\n      })\r\n        .then(function (response) {\r\n          dispatch({\r\n            type: 'MODULE_LIST',\r\n            payload: response.data\r\n           })\r\n        });\r\n}\r\n\r\nconst getModuleDetails = (moduleId) => dispatch => {\r\n  let urlLink = \"https://stgapi.omnicuris.com/api/v3/courses?courseSlug=thyroid-in-pregnancy&moduleId=\"+moduleId\r\n  if (moduleId === \"DEFAULT\"){\r\n        dispatch({\r\n          type: 'DEFAULT_PLAY_DATA',\r\n        })\r\n  } else {\r\n    axios({\r\n        method: 'get',\r\n        url: urlLink,\r\n        headers: { 'hk-access-token': '89e684ac-7ade-4cd8-bbdf-419a92f4cc5f'}\r\n      })\r\n        .then(function (response) {\r\n          dispatch({\r\n            type: 'PLAY_DATA',\r\n            payload: response.data\r\n           })\r\n        });\r\n  }\r\n}\r\n\r\nexport {\r\n    simpleAction,\r\n    getExperts,\r\n    getModuleList,\r\n    getModuleDetails\r\n}","import { combineReducers } from 'redux';\r\nimport projectDetails from './simpleReducer';\r\nexport default combineReducers({\r\n    projectDetails\r\n});","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n    case 'SIMPLE_ACTION':\r\n      return {\r\n        ...state,\r\n        result: action.payload\r\n      };\r\n    case 'EXPERTS_LIST':\r\n      return {\r\n        ...state,\r\n        expertDetails: action.payload.expertDetails\r\n      };\r\n    case 'MODULE_LIST':\r\n      return {\r\n        ...state,\r\n        courseDetails: action.payload.courseDetails,\r\n        videoData: {\r\n          image: action.payload.courseDetails.image,\r\n          videoSrc: action.payload.courseDetails.introVideo\r\n        }\r\n      };\r\n    case 'PLAY_DATA':\r\n      console.log(action.payload);\r\n      return {\r\n        ...state,\r\n        videoData: {\r\n          image:'',\r\n          videoSrc: action.payload.lessonDetails[0].userChapterDetails[0].content\r\n        }\r\n      }\r\n    case 'DEFAULT_PLAY_DATA':\r\n      return {\r\n        ...state,\r\n        videoData: {\r\n          image:state.courseDetails.image,\r\n          videoSrc: state.courseDetails.introVideo\r\n        }\r\n      }\r\n     default:\r\n      return state\r\n    }\r\n   }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component, Suspense } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport './App.scss';\r\n\r\nimport { \r\n  getExperts, \r\n  getModuleList,\r\n  getModuleDetails \r\n} from '../actions'\r\nconst HomePage = React.lazy(() => import('./Home/Home'));\r\n\r\nclass App extends Component {\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  componentDidMount = ()=>{\r\n    this.props.getExperts();\r\n    this.props.getModuleList();\r\n  }\r\n\r\n  render() {\r\n   return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"container-fluid\">\r\n      <Router>\r\n        <Route path=\"/\" exact  render={()=> (\r\n          <Suspense fallback={<div>Loading.....</div>}>\r\n            <HomePage/>\r\n          </Suspense>\r\n        )} />\r\n        <Route path=\"/Home\"  render={()=> (\r\n          <Suspense fallback={<div>Loading.....</div>}>\r\n            <HomePage/>\r\n          </Suspense>\r\n        )} />\r\n      </Router>\r\n        \r\n      </div>\r\n    </div>\r\n   );\r\n  }\r\n }\r\n\r\n const mapStateToProps = state => ({\r\n  ...state\r\n })\r\n\r\n const mapDispatchToProps = dispatch => ({\r\n  getExperts: () => dispatch(getExperts()),\r\n  getModuleList: () => dispatch(getModuleList()),\r\n  getModuleDetails: () => dispatch(getModuleDetails())\r\n });\r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport Store from './store';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.scss';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={Store()}>\r\n   <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n );\r\n\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   initialState,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}